PASCAL TRIANGLE:

Given a positive integer n, return the nth row of pascal's triangle.
Pascal's triangle is a triangular array of the binomial coefficients formed by summing up the elements of previous row.

File:PascalTriangleAnimated2.gif

Examples:

Input: n = 4
Output: [1, 3, 3, 1]
Explanation: 4th row of pascal's triangle is {1, 3, 3, 1}.
Input: n = 5
Output: [1, 4, 6, 4, 1]
Explanation: 5th row of pascal's triangle is {1, 4, 6, 4, 1}.
Input: n = 1
Output: [1]
Explanation: 1st row of pascal's triangle is {1}.
Constraints:
1 ≤ n ≤ 20

SOLUTION OF THE ABOVE PROBLEM:

#JAVA CODE:

class Solution {
    ArrayList<Integer> nthRowOfPascalTriangle(int n) {
        ArrayList<Integer> row = new ArrayList<>();
        row.add(1); // First element is always 1

        for (int i = 1; i < n; i++) {
            ArrayList<Integer> newRow = new ArrayList<>();
            newRow.add(1); // First element
            
            for (int j = 1; j < row.size(); j++) {
                newRow.add(row.get(j - 1) + row.get(j)); // Sum of two elements from the previous row
            }
            
            newRow.add(1); // Last element
            row = newRow; // Update row
        }

        return row;
    }
    
    public static void main(String[] args) {
        Solution sol = new Solution();
        int n = 5;
        System.out.println(sol.nthRowOfPascalTriangle(n)); // Output: [1, 4, 6, 4, 1]
    }
}

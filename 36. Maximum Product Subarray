36. Maximum Product Subarray

Given an array arr[] that contains positive and negative integers (may contain 0 as well). Find the maximum product that we can get in a subarray of arr[].

Note: It is guaranteed that the output fits in a 32-bit integer.

Examples

Input: arr[] = [-2, 6, -3, -10, 0, 2]
Output: 180
Explanation: The subarray with maximum product is {6, -3, -10} with product = 6 * (-3) * (-10) = 180.
Input: arr[] = [-1, -3, -10, 0, 6]
Output: 30
Explanation: The subarray with maximum product is {-3, -10} with product = (-3) * (-10) = 30.
Input: arr[] = [2, 3, 4] 
Output: 24 
Explanation: For an array with all positive elements, the result is product of all elements. 

SOLUTION OF THE ABOVE PROBLEM:

#JAVA CODE:

class Solution {
    // Function to find maximum product subarray
    int maxProduct(int[] arr) {
      
        int prod1 = arr[0], prod2 = arr[0], result = arr[0];
        for(int i = 1; i < arr.length; i++){
            int temp = Math.max(arr[i], Math.max(prod1 * arr[i], prod2 * arr[i]));
            prod2 = Math.min(arr[i], Math.min( prod1 * arr[i], prod2 * arr[i]));
            prod1 = temp;
            result = Math.max(result, prod1);

        }
        return result;
    }
}

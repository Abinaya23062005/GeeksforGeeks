43. Smallest Distinct Window:


Given a string str, your task is to find the length of the smallest window that contains all the characters of the given string at least once.

Example:

Input: str = "aabcbcdbca"
Output: 4
Explanation: Sub-String "dbca" has the smallest length that contains all the characters of str.
Input: str = "aaab"
Output: 2
Explanation: Sub-String "ab" has the smallest length that contains all the characters of str.
Input: str = "geeksforgeeks"
Output: 8
Explanation: There are multiple substring with smallest length that contains all characters of str, "geeksfor" and "forgeeks". 
Constraints:
1 ≤ str.size() ≤ 105
str contains only lower-case english alphabets

SOLUTION OF THE ABOVE PROBLEM:

#JAVA CODE:

class Solution {
    public int findSubString(String str) {
              if (str.length() == 0) return 0;

        // Step 1: Count unique characters
        Set<Character> uniqueChars = new HashSet<>();
        for (char c : str.toCharArray()) {
            uniqueChars.add(c);
        }
        int totalUnique = uniqueChars.size();

        // Step 2: Use sliding window
        int[] freq = new int[256];
        int start = 0, minLen = Integer.MAX_VALUE, uniqueCount = 0;
        
        for (int end = 0; end < str.length(); end++) {
            char endChar = str.charAt(end);
            freq[endChar]++;
            
            if (freq[endChar] == 1) {
                uniqueCount++;
            }

            // When all unique characters are in the current window
            while (uniqueCount == totalUnique) {
                minLen = Math.min(minLen, end - start + 1);

                // Shrink from left
                char startChar = str.charAt(start);
                freq[startChar]--;
                if (freq[startChar] == 0) {
                    uniqueCount--;
                }
                start++;
            }
        }

        return minLen;
    }
}

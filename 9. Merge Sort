Merge Sort
Given an array arr[], its starting position l and its ending position r. Sort the array using the merge sort algorithm.

Examples:

Input: arr[] = [4, 1, 3, 9, 7]
Output: [1, 3, 4, 7, 9]
Input: arr[] = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Input: arr[] = [1, 3 , 2]
Output: [1, 2, 3]
SOLUTION OF THE ABOVE PROBLEM:
Time Complexity : O(n log n).
Space Complexity:O(n).

#JAVA CODE:
class Solution {

    void mergeSort(int arr[], int left, int right) {
        if(left < right){
            int mid = left + (right - left) / 2;
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);
            merge(arr, left, mid, right);
        }
    }
            
            private static void merge(int[] arr, int left, int mid, int right){
                int n1 = mid - left + 1;
                int n2 = right - mid;
                int[] leftArr = new int[n1];
                int[] rightArr = new int[n2];
                System.arraycopy(arr, left, leftArr, 0, n1);
                System.arraycopy(arr, mid + 1, rightArr, 0, n2);
                 int i = 0, j = 0, k = left;
                 
                 while(i < n1 && j < n2){
                     if(leftArr[i] <= rightArr[j]){
                         arr[k++] = leftArr[i++];
                     }
                     else{
                         arr[k++] = rightArr[j++];
                     }
                 }
                     while(i < n1) arr[k++] = leftArr[i++];
                     while(j < n2) arr[k++] = rightArr[j++];
                     
                     
            }    
            
        
    }


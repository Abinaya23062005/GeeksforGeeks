35. Union of 2 Sorted with Duplicates

Given two sorted arrays a[] and b[], where each array may contain duplicate elements , the task is to return the elements in the union of the two arrays in sorted order.

Union of two arrays can be defined as the set containing distinct common elements that are present in either of the arrays.
Examples:

Input: a[] = [1, 2, 3, 4, 5], b[] = [1, 2, 3, 6, 7]
Output: 1 2 3 4 5 6 7
Explanation: Distinct elements including both the arrays are: 1 2 3 4 5 6 7.
Input: a[] = [2, 2, 3, 4, 5], b[] = [1, 1, 2, 3, 4]
Output: 1 2 3 4 5
Explanation: Distinct elements including both the arrays are: 1 2 3 4 5.
Input: a[] = [1, 1, 1, 1, 1], b[] = [2, 2, 2, 2, 2]
Output: 1 2
Explanation: Distinct elements including both the arrays are: 1 2.

SOLUTION OF THE ABOVE PROBLEM:

#JAVA CODE:

class Solution {
    // Function to return a list containing the union of the two arrays.
    
    public static ArrayList<Integer> findUnion(int a[], int b[]) {
        ArrayList<Integer> unionList = new ArrayList<>();
        int i = 0, j = 0;
        int m = a.length, n = b.length;

        while (i < m && j < n) {
            // Avoid duplicates in result
            if (!unionList.isEmpty() && unionList.get(unionList.size() - 1) == Math.min(a[i], b[j])) {
                if (a[i] < b[j]) i++;
                else if (a[i] > b[j]) j++;
                else { i++; j++; }
                continue;
            }
            
            if (a[i] < b[j]) {
                unionList.add(a[i]);
                i++;
            } else if (a[i] > b[j]) {
                unionList.add(b[j]);
                j++;
            } else { // a[i] == b[j], take one and move both
                unionList.add(a[i]);
                i++;
                j++;
            }
        }

        // Add remaining elements from `a`
        while (i < m) {
            if (unionList.isEmpty() || unionList.get(unionList.size() - 1) != a[i])
                unionList.add(a[i]);
            i++;
        }

        // Add remaining elements from `b`
        while (j < n) {
            if (unionList.isEmpty() || unionList.get(unionList.size() - 1) != b[j])
                unionList.add(b[j]);
            j++;
        }

        return unionList;
    }
  
    
}

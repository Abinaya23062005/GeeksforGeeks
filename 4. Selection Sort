SELECTION SORT:

Given an array arr, use selection sort to sort arr[] in increasing order.

Examples :

Input: arr[] = [4, 1, 3, 9, 7]
Output: [1, 3, 4, 7, 9]
Explanation: Maintain sorted (in bold) and unsorted subarrays. Select 1. Array becomes 1 4 3 9 7. Select 3. Array becomes 1 3 4 9 7. Select 4. Array becomes 1 3 4 9 7. Select 7. Array becomes 1 3 4 7 9. Select 9. Array becomes 1 3 4 7 9.
Input: arr[] = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Input: arr[] = [38, 31, 20, 14, 30]
Output: [14, 20, 30, 31, 38]
Constraints:
1 ≤ arr.size() ≤ 103
1 ≤ arr[i] ≤ 106
SOLUTION FOR THE ABOVE PROBLEM:
Time Complexity O(n2).
Space Comlexity O(1).

#JAVA CODE:

class Solution {
    public void selectionSort(int[] arr) {
        int n = arr.length; // Get array length
        for (int i = 0; i < n - 1; i++) { // Loop until the second last element
            int minIndex = i;
            for (int j = i + 1; j < n; j++) { // Start j from i+1
                if (arr[j] < arr[minIndex]) {
                    minIndex = j; // Update index of the smallest element
                }
            }
            // Swap arr[i] with arr[minIndex]
            int temp = arr[i];
            arr[i] = arr[minIndex];
            arr[minIndex] = temp;
        }
    }
}  

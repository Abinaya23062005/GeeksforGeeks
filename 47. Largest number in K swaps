47. Largest number in K swaps

Given a number k and string s of digits denoting a positive integer, build the largest number possible by performing swap operations on the digits of s at most k times.

Examples :

Input: s = "1234567", k = 4
Output: 7654321
Explanation: Three swaps can make the input 1234567 to 7654321, swapping 1 with 7, 2 with 6 and finally 3 with 5.
Input: s = "3435335", k = 3
Output: 5543333
Explanation: Three swaps can make the input 3435335 to 5543333, swapping 3 with 5, 4 with 5 and finally 3 with 4.
Input: s = "1034", k = 2
Output: 4301
Explanation: Two swaps can make the input 1034 to 4301, swapping 1 with 4 and finally 0 with 3. 
Constraints:
1 ≤ s.size() ≤ 15
1 ≤ k ≤ 7

SOLUTION OF THE ABOVE PROBLEM:

#JAVA CODE:

class Solution {
    String max = "";

    public String findMaximumNum(String s, int k) {
        max = s;
        char[] arr = s.toCharArray();
        helper(arr, k, 0);
        return max;
    }

    private void helper(char[] arr, int k, int index) {
        if (k == 0 || index >= arr.length) return; // FIXED base case

        int n = arr.length;
        char maxDigit = arr[index];

        // Find the maximum digit from index to end
        for (int i = index + 1; i < n; i++) {
            if (arr[i] > maxDigit) {
                maxDigit = arr[i];
            }
        }

        // If a better digit than arr[index] exists, try swapping with all such occurrences
        if (maxDigit != arr[index]) {
            for (int i = n - 1; i > index; i--) {
                if (arr[i] == maxDigit) {
                    swap(arr, index, i);
                    String curr = new String(arr);
                    if (curr.compareTo(max) > 0) {
                        max = curr;
                    }
                    helper(arr, k - 1, index + 1);
                    swap(arr, index, i); // backtrack
                }
            }
        } else {
            // No better digit to swap, move to next index without reducing k
            helper(arr, k, index + 1);
        }
    }

    private void swap(char[] arr, int i, int j) {
        char temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
